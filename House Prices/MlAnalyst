{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"collapsed_sections":["GHatHZG6Eqa0","Qsda4xBjQqIn","K_gi8jHUPs6V","1mdaOtt-QkjY","hMTzEKO0REuQ","MxF0b35uTp_s","Pe87tGffUkjh","5RQl5-Q8WD4w","rLr41ANXWuJr","1qSgQYsNXUUe","tg4f85ZTX742"],"authorship_tag":"ABX9TyMiWMN9AmbUlsn/NX5M7e9E"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# Импорт библиотек"],"metadata":{"id":"GHatHZG6Eqa0"}},{"cell_type":"code","execution_count":1,"metadata":{"id":"Q44CS2oBDJ6c","executionInfo":{"status":"ok","timestamp":1754679646585,"user_tz":-300,"elapsed":2318,"user":{"displayName":"vlad rus","userId":"10033689266646351571"}}},"outputs":[],"source":["import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import seaborn as sns"]},{"cell_type":"code","source":["df_train = pd.read_csv('/content/train.csv')\n","df_train.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":255},"id":"zteQWCg7DoP6","executionInfo":{"status":"ok","timestamp":1754680050552,"user_tz":-300,"elapsed":83,"user":{"displayName":"vlad rus","userId":"10033689266646351571"}},"outputId":"c3fd1849-2cbc-4d8b-f041-db9b9a58ae7d"},"execution_count":7,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   Id  MSSubClass MSZoning  LotFrontage  LotArea Street Alley LotShape  \\\n","0   1          60       RL         65.0     8450   Pave   NaN      Reg   \n","1   2          20       RL         80.0     9600   Pave   NaN      Reg   \n","2   3          60       RL         68.0    11250   Pave   NaN      IR1   \n","3   4          70       RL         60.0     9550   Pave   NaN      IR1   \n","4   5          60       RL         84.0    14260   Pave   NaN      IR1   \n","\n","  LandContour Utilities  ... PoolArea PoolQC Fence MiscFeature MiscVal MoSold  \\\n","0         Lvl    AllPub  ...        0    NaN   NaN         NaN       0      2   \n","1         Lvl    AllPub  ...        0    NaN   NaN         NaN       0      5   \n","2         Lvl    AllPub  ...        0    NaN   NaN         NaN       0      9   \n","3         Lvl    AllPub  ...        0    NaN   NaN         NaN       0      2   \n","4         Lvl    AllPub  ...        0    NaN   NaN         NaN       0     12   \n","\n","  YrSold  SaleType  SaleCondition  SalePrice  \n","0   2008        WD         Normal     208500  \n","1   2007        WD         Normal     181500  \n","2   2008        WD         Normal     223500  \n","3   2006        WD        Abnorml     140000  \n","4   2008        WD         Normal     250000  \n","\n","[5 rows x 81 columns]"],"text/html":["\n","  <div id=\"df-1871b27d-948b-418c-b697-3689f5900379\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Id</th>\n","      <th>MSSubClass</th>\n","      <th>MSZoning</th>\n","      <th>LotFrontage</th>\n","      <th>LotArea</th>\n","      <th>Street</th>\n","      <th>Alley</th>\n","      <th>LotShape</th>\n","      <th>LandContour</th>\n","      <th>Utilities</th>\n","      <th>...</th>\n","      <th>PoolArea</th>\n","      <th>PoolQC</th>\n","      <th>Fence</th>\n","      <th>MiscFeature</th>\n","      <th>MiscVal</th>\n","      <th>MoSold</th>\n","      <th>YrSold</th>\n","      <th>SaleType</th>\n","      <th>SaleCondition</th>\n","      <th>SalePrice</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>60</td>\n","      <td>RL</td>\n","      <td>65.0</td>\n","      <td>8450</td>\n","      <td>Pave</td>\n","      <td>NaN</td>\n","      <td>Reg</td>\n","      <td>Lvl</td>\n","      <td>AllPub</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>2008</td>\n","      <td>WD</td>\n","      <td>Normal</td>\n","      <td>208500</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>20</td>\n","      <td>RL</td>\n","      <td>80.0</td>\n","      <td>9600</td>\n","      <td>Pave</td>\n","      <td>NaN</td>\n","      <td>Reg</td>\n","      <td>Lvl</td>\n","      <td>AllPub</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>0</td>\n","      <td>5</td>\n","      <td>2007</td>\n","      <td>WD</td>\n","      <td>Normal</td>\n","      <td>181500</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>60</td>\n","      <td>RL</td>\n","      <td>68.0</td>\n","      <td>11250</td>\n","      <td>Pave</td>\n","      <td>NaN</td>\n","      <td>IR1</td>\n","      <td>Lvl</td>\n","      <td>AllPub</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>0</td>\n","      <td>9</td>\n","      <td>2008</td>\n","      <td>WD</td>\n","      <td>Normal</td>\n","      <td>223500</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>70</td>\n","      <td>RL</td>\n","      <td>60.0</td>\n","      <td>9550</td>\n","      <td>Pave</td>\n","      <td>NaN</td>\n","      <td>IR1</td>\n","      <td>Lvl</td>\n","      <td>AllPub</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>2006</td>\n","      <td>WD</td>\n","      <td>Abnorml</td>\n","      <td>140000</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>60</td>\n","      <td>RL</td>\n","      <td>84.0</td>\n","      <td>14260</td>\n","      <td>Pave</td>\n","      <td>NaN</td>\n","      <td>IR1</td>\n","      <td>Lvl</td>\n","      <td>AllPub</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>0</td>\n","      <td>12</td>\n","      <td>2008</td>\n","      <td>WD</td>\n","      <td>Normal</td>\n","      <td>250000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 81 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1871b27d-948b-418c-b697-3689f5900379')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-1871b27d-948b-418c-b697-3689f5900379 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-1871b27d-948b-418c-b697-3689f5900379');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-e625848a-394f-432a-a8e3-ee4f4b72f6bd\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e625848a-394f-432a-a8e3-ee4f4b72f6bd')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-e625848a-394f-432a-a8e3-ee4f4b72f6bd button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df_train"}},"metadata":{},"execution_count":7}]},{"cell_type":"code","source":["df_test = pd.read_csv('/content/test.csv')\n","df_test.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":255},"id":"oDfHMX2HEZJ1","executionInfo":{"status":"ok","timestamp":1754680059429,"user_tz":-300,"elapsed":79,"user":{"displayName":"vlad rus","userId":"10033689266646351571"}},"outputId":"989f2617-c31e-48a8-de60-9bbaaff4c940"},"execution_count":8,"outputs":[{"output_type":"execute_result","data":{"text/plain":["     Id  MSSubClass MSZoning  LotFrontage  LotArea Street Alley LotShape  \\\n","0  1461          20       RH         80.0    11622   Pave   NaN      Reg   \n","1  1462          20       RL         81.0    14267   Pave   NaN      IR1   \n","2  1463          60       RL         74.0    13830   Pave   NaN      IR1   \n","3  1464          60       RL         78.0     9978   Pave   NaN      IR1   \n","4  1465         120       RL         43.0     5005   Pave   NaN      IR1   \n","\n","  LandContour Utilities  ... ScreenPorch PoolArea PoolQC  Fence MiscFeature  \\\n","0         Lvl    AllPub  ...         120        0    NaN  MnPrv         NaN   \n","1         Lvl    AllPub  ...           0        0    NaN    NaN        Gar2   \n","2         Lvl    AllPub  ...           0        0    NaN  MnPrv         NaN   \n","3         Lvl    AllPub  ...           0        0    NaN    NaN         NaN   \n","4         HLS    AllPub  ...         144        0    NaN    NaN         NaN   \n","\n","  MiscVal MoSold  YrSold  SaleType  SaleCondition  \n","0       0      6    2010        WD         Normal  \n","1   12500      6    2010        WD         Normal  \n","2       0      3    2010        WD         Normal  \n","3       0      6    2010        WD         Normal  \n","4       0      1    2010        WD         Normal  \n","\n","[5 rows x 80 columns]"],"text/html":["\n","  <div id=\"df-c5f1ca30-d8dd-4931-864d-408df94b9b53\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Id</th>\n","      <th>MSSubClass</th>\n","      <th>MSZoning</th>\n","      <th>LotFrontage</th>\n","      <th>LotArea</th>\n","      <th>Street</th>\n","      <th>Alley</th>\n","      <th>LotShape</th>\n","      <th>LandContour</th>\n","      <th>Utilities</th>\n","      <th>...</th>\n","      <th>ScreenPorch</th>\n","      <th>PoolArea</th>\n","      <th>PoolQC</th>\n","      <th>Fence</th>\n","      <th>MiscFeature</th>\n","      <th>MiscVal</th>\n","      <th>MoSold</th>\n","      <th>YrSold</th>\n","      <th>SaleType</th>\n","      <th>SaleCondition</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1461</td>\n","      <td>20</td>\n","      <td>RH</td>\n","      <td>80.0</td>\n","      <td>11622</td>\n","      <td>Pave</td>\n","      <td>NaN</td>\n","      <td>Reg</td>\n","      <td>Lvl</td>\n","      <td>AllPub</td>\n","      <td>...</td>\n","      <td>120</td>\n","      <td>0</td>\n","      <td>NaN</td>\n","      <td>MnPrv</td>\n","      <td>NaN</td>\n","      <td>0</td>\n","      <td>6</td>\n","      <td>2010</td>\n","      <td>WD</td>\n","      <td>Normal</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1462</td>\n","      <td>20</td>\n","      <td>RL</td>\n","      <td>81.0</td>\n","      <td>14267</td>\n","      <td>Pave</td>\n","      <td>NaN</td>\n","      <td>IR1</td>\n","      <td>Lvl</td>\n","      <td>AllPub</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>Gar2</td>\n","      <td>12500</td>\n","      <td>6</td>\n","      <td>2010</td>\n","      <td>WD</td>\n","      <td>Normal</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1463</td>\n","      <td>60</td>\n","      <td>RL</td>\n","      <td>74.0</td>\n","      <td>13830</td>\n","      <td>Pave</td>\n","      <td>NaN</td>\n","      <td>IR1</td>\n","      <td>Lvl</td>\n","      <td>AllPub</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>NaN</td>\n","      <td>MnPrv</td>\n","      <td>NaN</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>2010</td>\n","      <td>WD</td>\n","      <td>Normal</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1464</td>\n","      <td>60</td>\n","      <td>RL</td>\n","      <td>78.0</td>\n","      <td>9978</td>\n","      <td>Pave</td>\n","      <td>NaN</td>\n","      <td>IR1</td>\n","      <td>Lvl</td>\n","      <td>AllPub</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>0</td>\n","      <td>6</td>\n","      <td>2010</td>\n","      <td>WD</td>\n","      <td>Normal</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1465</td>\n","      <td>120</td>\n","      <td>RL</td>\n","      <td>43.0</td>\n","      <td>5005</td>\n","      <td>Pave</td>\n","      <td>NaN</td>\n","      <td>IR1</td>\n","      <td>HLS</td>\n","      <td>AllPub</td>\n","      <td>...</td>\n","      <td>144</td>\n","      <td>0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>2010</td>\n","      <td>WD</td>\n","      <td>Normal</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 80 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c5f1ca30-d8dd-4931-864d-408df94b9b53')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-c5f1ca30-d8dd-4931-864d-408df94b9b53 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-c5f1ca30-d8dd-4931-864d-408df94b9b53');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-4ae42a4a-4659-4d29-96c9-dc3eb8d2f2ff\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-4ae42a4a-4659-4d29-96c9-dc3eb8d2f2ff')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-4ae42a4a-4659-4d29-96c9-dc3eb8d2f2ff button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df_test"}},"metadata":{},"execution_count":8}]},{"cell_type":"code","source":["import random\n","\n","# Рассчитываем количество уникальных значений и их доли\n","nuniques = df_train.nunique().to_dict()\n","cardinalities = (df_train.nunique() / len(df_train)).to_dict()\n","nunique_threshold = 30\n","features = []\n","\n","# Собираем информацию о каждом признаке\n","for feature_name, unique_count in nuniques.items():\n","    # Определяем тип признака\n","    feature_type = \"categorical\" if unique_count <= nunique_threshold else \"numerical\"\n","\n","    # Получаем примеры значений\n","    feature_values = df_train[feature_name].unique().tolist()\n","    if feature_type == \"numerical\":\n","        feature_values = random.sample(feature_values, min(10, len(feature_values)))\n","\n","    # Добавляем информацию о признаке\n","    features.append((\n","        feature_name,\n","        feature_type,\n","        unique_count,\n","        cardinalities[feature_name],\n","        feature_values\n","    ))\n","\n","# Создаем итоговый DataFrame\n","features_df = pd.DataFrame(\n","    features,\n","    columns=['Признак', 'Тип данных', 'Кол-во уникальных', 'Доля уникальных', 'Пример значений']\n",")"],"metadata":{"id":"sKfM4tUuFR30","executionInfo":{"status":"ok","timestamp":1754680249157,"user_tz":-300,"elapsed":33,"user":{"displayName":"vlad rus","userId":"10033689266646351571"}}},"execution_count":12,"outputs":[]},{"cell_type":"code","source":["# from IPython.display import display\n","\n","# with pd.option_context('display.max_rows', 100, 'display.max_columns', None):\n","#     display(features_df)"],"metadata":{"id":"6yICJyAqFcEw","executionInfo":{"status":"ok","timestamp":1754681742628,"user_tz":-300,"elapsed":6,"user":{"displayName":"vlad rus","userId":"10033689266646351571"}}},"execution_count":20,"outputs":[]},{"cell_type":"code","source":["X = df_train.drop('SalePrice', axis=1)\n","y = df_train['SalePrice']"],"metadata":{"id":"_PrqGZQpHSta","executionInfo":{"status":"ok","timestamp":1754681802843,"user_tz":-300,"elapsed":2,"user":{"displayName":"vlad rus","userId":"10033689266646351571"}}},"execution_count":25,"outputs":[]},{"cell_type":"markdown","source":["# Baseline"],"metadata":{"id":"Qsda4xBjQqIn"}},{"cell_type":"markdown","source":["## Анализ задачи и выбор схемы кросс-валидации"],"metadata":{"id":"K_gi8jHUPs6V"}},{"cell_type":"code","source":["train = pd.read_csv('train.csv')\n","test = pd.read_csv('test.csv')"],"metadata":{"id":"suyD-wYQPZH-","executionInfo":{"status":"ok","timestamp":1754682727016,"user_tz":-300,"elapsed":40,"user":{"displayName":"vlad rus","userId":"10033689266646351571"}}},"execution_count":31,"outputs":[]},{"cell_type":"code","source":["num_cols = train.select_dtypes(include=['int64', 'float64']).columns.drop('SalePrice')\n","\n","# Сравнение средних значений\n","train_mean = train[num_cols].mean()\n","test_mean = test[num_cols].mean()\n","diff = (train_mean - test_mean).abs().sort_values(ascending=False)\n","\n","# Признаки с максимальными различиями\n","top_diff = diff.head(5)\n","print(top_diff)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_s9ZCbR9PlpC","executionInfo":{"status":"ok","timestamp":1754682900084,"user_tz":-300,"elapsed":15,"user":{"displayName":"vlad rus","userId":"10033689266646351571"}},"outputId":"9ccf6b74-9397-4ef9-d56b-37b6a02acc73"},"execution_count":35,"outputs":[{"output_type":"stream","name":"stdout","text":["Id           1459.500000\n","LotArea       697.667013\n","GrLivArea      29.417777\n","2ndFlrSF       21.024680\n","MiscVal        14.678882\n","dtype: float64\n"]}]},{"cell_type":"markdown","source":["## Реализация решения"],"metadata":{"id":"1mdaOtt-QkjY"}},{"cell_type":"code","source":["from sklearn.neighbors import KNeighborsRegressor\n","from sklearn.model_selection import StratifiedKFold\n","from sklearn.metrics import mean_squared_error, mean_absolute_percentage_error\n","\n","\n","# Выбор числовых признаков и заполнение пропусков нулями\n","X = train[num_cols].fillna(0)\n","y = train['SalePrice']\n","\n","# Создание страт на основе квартилей цены\n","y_strat = pd.qcut(y, q=5, labels=False)\n","\n","# Инициализация модели kNN\n","knn = KNeighborsRegressor(\n","    n_neighbors=5,\n","    weights='uniform',\n","    metric='minkowski',\n","    p=2\n",")\n","\n","# Настройка кросс-валидации\n","skf = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)"],"metadata":{"id":"0COHRSahQFyG","executionInfo":{"status":"ok","timestamp":1754683144391,"user_tz":-300,"elapsed":7,"user":{"displayName":"vlad rus","userId":"10033689266646351571"}}},"execution_count":36,"outputs":[]},{"cell_type":"markdown","source":["## Оценка качества модели"],"metadata":{"id":"hMTzEKO0REuQ"}},{"cell_type":"code","source":["# Сбор метрик\n","train_mse, val_mse = [], []\n","train_mape, val_mape = [], []\n","\n","for train_idx, val_idx in skf.split(X, y_strat):\n","    X_train, X_val = X.iloc[train_idx], X.iloc[val_idx]\n","    y_train, y_val = y.iloc[train_idx], y.iloc[val_idx]\n","\n","    # Обучение и предсказание\n","    knn.fit(X_train, y_train)\n","\n","    # Метрики для train\n","    y_train_pred = knn.predict(X_train)\n","    train_mse.append(mean_squared_error(y_train, y_train_pred))\n","    train_mape.append(mean_absolute_percentage_error(y_train, y_train_pred))\n","\n","    # Метрики для validation\n","    y_val_pred = knn.predict(X_val)\n","    val_mse.append(mean_squared_error(y_val, y_val_pred))\n","    val_mape.append(mean_absolute_percentage_error(y_val, y_val_pred))\n","\n","# Формирование результатов\n","metrics = {\n","    'Train MSE': [np.mean(train_mse), np.median(train_mse)],\n","    'Train MAPE': [np.mean(train_mape), np.median(train_mape)],\n","    'Validation MSE': [np.mean(val_mse), np.median(val_mse)],\n","    'Validation MAPE': [np.mean(val_mape), np.median(val_mape)]\n","}\n","\n","results = pd.DataFrame(\n","    metrics,\n","    index=['Mean', 'Median']\n",")\n","print(results)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"W4KDmgAMRAC4","executionInfo":{"status":"ok","timestamp":1754683255296,"user_tz":-300,"elapsed":434,"user":{"displayName":"vlad rus","userId":"10033689266646351571"}},"outputId":"f12abdb7-cde9-4a48-a045-daed7ebaa33d"},"execution_count":38,"outputs":[{"output_type":"stream","name":"stdout","text":["           Train MSE  Train MAPE  Validation MSE  Validation MAPE\n","Mean    1.464305e+09    0.139912    2.235617e+09         0.173882\n","Median  1.503426e+09    0.139835    2.106757e+09         0.172878\n"]}]},{"cell_type":"markdown","source":["# Baseline + Scaling"],"metadata":{"id":"MxF0b35uTp_s"}},{"cell_type":"code","source":["import numpy as np\n","import pandas as pd\n","from sklearn.neighbors import KNeighborsRegressor\n","from sklearn.model_selection import StratifiedKFold\n","from sklearn.metrics import mean_squared_error, mean_absolute_percentage_error\n","from sklearn.preprocessing import StandardScaler\n","\n","# Загрузка данных\n","train = pd.read_csv('train.csv')\n","test = pd.read_csv('test.csv')\n","\n","# Выбор числовых признаков и заполнение пропусков нулями\n","num_cols = train.select_dtypes(include=['int64', 'float64']).columns.drop('SalePrice')\n","X = train[num_cols].fillna(0)\n","y = train['SalePrice']\n","\n","# Создание страт на основе квартилей цены\n","y_strat = pd.qcut(y, q=5, labels=False)\n","\n","# Инициализация модели kNN\n","knn = KNeighborsRegressor(\n","    n_neighbors=5,\n","    weights='uniform',\n","    metric='minkowski',\n","    p=2\n",")\n","\n","# Настройка кросс-валидации\n","skf = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)\n","\n","# Сбор метрик\n","train_mse, val_mse = [], []\n","train_mape, val_mape = [], []\n","\n","for train_idx, val_idx in skf.split(X, y_strat):\n","    X_train, X_val = X.iloc[train_idx], X.iloc[val_idx]\n","    y_train, y_val = y.iloc[train_idx], y.iloc[val_idx]\n","\n","    # Масштабирование признаков\n","    scaler = StandardScaler()\n","    X_train_scaled = scaler.fit_transform(X_train)\n","    X_val_scaled = scaler.transform(X_val)\n","\n","    # Обучение и предсказание\n","    knn.fit(X_train_scaled, y_train)\n","\n","    # Метрики для train\n","    y_train_pred = knn.predict(X_train_scaled)\n","    train_mse.append(mean_squared_error(y_train, y_train_pred))\n","    train_mape.append(mean_absolute_percentage_error(y_train, y_train_pred))\n","\n","    # Метрики для validation\n","    y_val_pred = knn.predict(X_val_scaled)\n","    val_mse.append(mean_squared_error(y_val, y_val_pred))\n","    val_mape.append(mean_absolute_percentage_error(y_val, y_val_pred))\n","\n","# Формирование результатов\n","metrics = {\n","    'Train MSE': [np.mean(train_mse), np.median(train_mse)],\n","    'Train MAPE': [np.mean(train_mape), np.median(train_mape)],\n","    'Validation MSE': [np.mean(val_mse), np.median(val_mse)],\n","    'Validation MAPE': [np.mean(val_mape), np.median(val_mape)]\n","}\n","\n","results_scaled = pd.DataFrame(\n","    metrics,\n","    index=['Mean', 'Median']\n",")\n","print(\"Результаты с масштабированием признаков:\")\n","print(results_scaled)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lfoCPQw0OLN_","executionInfo":{"status":"ok","timestamp":1754683961321,"user_tz":-300,"elapsed":279,"user":{"displayName":"vlad rus","userId":"10033689266646351571"}},"outputId":"2b5aaec2-af86-43a6-9afc-1ca269ddbd5e"},"execution_count":39,"outputs":[{"output_type":"stream","name":"stdout","text":["Результаты с масштабированием признаков:\n","           Train MSE  Train MAPE  Validation MSE  Validation MAPE\n","Mean    1.080947e+09     0.10531    1.546646e+09          0.12969\n","Median  1.126694e+09     0.10516    1.347773e+09          0.12975\n"]}]},{"cell_type":"markdown","source":["# baseline + categorical features"],"metadata":{"id":"Pe87tGffUkjh"}},{"cell_type":"code","source":["import numpy as np\n","import pandas as pd\n","from sklearn.neighbors import KNeighborsRegressor\n","from sklearn.model_selection import StratifiedKFold\n","from sklearn.metrics import mean_squared_error, mean_absolute_percentage_error\n","from sklearn.preprocessing import OneHotEncoder\n","from sklearn.compose import ColumnTransformer\n","from sklearn.impute import SimpleImputer\n","from sklearn.pipeline import Pipeline\n","\n","# Загрузка данных\n","train = pd.read_csv('train.csv')\n","test = pd.read_csv('test.csv')\n","\n","# Разделение признаков на числовые и категориальные\n","num_cols = train.select_dtypes(include=['int64', 'float64']).columns.drop('SalePrice')\n","cat_cols = train.select_dtypes(include=['object']).columns\n","\n","X = train[num_cols.tolist() + cat_cols.tolist()]\n","y = train['SalePrice']\n","\n","# Создание страт на основе квартилей цены\n","y_strat = pd.qcut(y, q=5, labels=False)\n","\n","# Препроцессинг\n","num_transformer = SimpleImputer(strategy='constant', fill_value=0)\n","cat_transformer = Pipeline([\n","    ('imputer', SimpleImputer(strategy='most_frequent')),\n","    ('onehot', OneHotEncoder(handle_unknown='ignore'))\n","])\n","\n","preprocessor = ColumnTransformer(\n","    transformers=[\n","        ('num', num_transformer, num_cols),\n","        ('cat', cat_transformer, cat_cols)\n","    ])\n","\n","# Инициализация модели kNN\n","knn = KNeighborsRegressor(\n","    n_neighbors=5,\n","    weights='uniform',\n","    metric='minkowski',\n","    p=2\n",")\n","\n","# Настройка кросс-валидации\n","skf = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)\n","\n","# Сбор метрик\n","train_mse, val_mse = [], []\n","train_mape, val_mape = [], []\n","\n","for train_idx, val_idx in skf.split(X, y_strat):\n","    X_train, X_val = X.iloc[train_idx], X.iloc[val_idx]\n","    y_train, y_val = y.iloc[train_idx], y.iloc[val_idx]\n","\n","    # Препроцессинг\n","    X_train_processed = preprocessor.fit_transform(X_train)\n","    X_val_processed = preprocessor.transform(X_val)\n","\n","    # Обучение и предсказание\n","    knn.fit(X_train_processed, y_train)\n","\n","    # Метрики для train\n","    y_train_pred = knn.predict(X_train_processed)\n","    train_mse.append(mean_squared_error(y_train, y_train_pred))\n","    train_mape.append(mean_absolute_percentage_error(y_train, y_train_pred))\n","\n","    # Метрики для validation\n","    y_val_pred = knn.predict(X_val_processed)\n","    val_mse.append(mean_squared_error(y_val, y_val_pred))\n","    val_mape.append(mean_absolute_percentage_error(y_val, y_val_pred))\n","\n","# Формирование результатов\n","metrics = {\n","    'Train MSE': [np.mean(train_mse), np.median(train_mse)],\n","    'Train MAPE': [np.mean(train_mape), np.median(train_mape)],\n","    'Validation MSE': [np.mean(val_mse), np.median(val_mse)],\n","    'Validation MAPE': [np.mean(val_mape), np.median(val_mape)]\n","}\n","\n","results_categorical = pd.DataFrame(\n","    metrics,\n","    index=['Mean', 'Median']\n",")\n","print(\"Результаты с категориальными признаками:\")\n","print(results_categorical)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1-SIa0xZUG3N","executionInfo":{"status":"ok","timestamp":1754684344520,"user_tz":-300,"elapsed":3358,"user":{"displayName":"vlad rus","userId":"10033689266646351571"}},"outputId":"a1d381b0-4c94-4508-ba9e-f2c1405a428f"},"execution_count":41,"outputs":[{"output_type":"stream","name":"stdout","text":["Результаты с категориальными признаками:\n","           Train MSE  Train MAPE  Validation MSE  Validation MAPE\n","Mean    1.464087e+09    0.139896    2.235617e+09         0.173882\n","Median  1.503426e+09    0.139835    2.106757e+09         0.172878\n"]}]},{"cell_type":"markdown","source":["# baseline + scaling + categorical features"],"metadata":{"id":"5RQl5-Q8WD4w"}},{"cell_type":"code","source":["import numpy as np\n","import pandas as pd\n","from sklearn.neighbors import KNeighborsRegressor\n","from sklearn.model_selection import StratifiedKFold\n","from sklearn.metrics import mean_squared_error, mean_absolute_percentage_error\n","from sklearn.preprocessing import OneHotEncoder, StandardScaler\n","from sklearn.compose import ColumnTransformer\n","from sklearn.impute import SimpleImputer\n","from sklearn.pipeline import Pipeline\n","\n","# Загрузка данных\n","train = pd.read_csv('train.csv')\n","test = pd.read_csv('test.csv')\n","\n","# Разделение признаков\n","num_cols = train.select_dtypes(include=['int64', 'float64']).columns.drop('SalePrice')\n","cat_cols = train.select_dtypes(include=['object']).columns\n","\n","X = train[num_cols.tolist() + cat_cols.tolist()]\n","y = train['SalePrice']\n","\n","# Создание страт\n","y_strat = pd.qcut(y, q=5, labels=False)\n","\n","# Препроцессинг с масштабированием числовых признаков\n","num_transformer = Pipeline([\n","    ('imputer', SimpleImputer(strategy='constant', fill_value=0)),\n","    ('scaler', StandardScaler())\n","])\n","\n","cat_transformer = Pipeline([\n","    ('imputer', SimpleImputer(strategy='most_frequent')),\n","    ('onehot', OneHotEncoder(handle_unknown='ignore'))\n","])\n","\n","preprocessor = ColumnTransformer(\n","    transformers=[\n","        ('num', num_transformer, num_cols),\n","        ('cat', cat_transformer, cat_cols)\n","    ])\n","\n","# Модель kNN\n","knn = KNeighborsRegressor(\n","    n_neighbors=5,\n","    weights='uniform',\n","    metric='minkowski',\n","    p=2,\n","    n_jobs=-1\n",")\n","\n","# Полный пайплайн\n","full_pipeline = Pipeline([\n","    ('preprocessor', preprocessor),\n","    ('model', knn)\n","])\n","\n","# Кросс-валидация\n","skf = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)\n","\n","# Сбор метрик\n","train_mse, val_mse = [], []\n","train_mape, val_mape = [], []\n","\n","for train_idx, val_idx in skf.split(X, y_strat):\n","    X_train, X_val = X.iloc[train_idx], X.iloc[val_idx]\n","    y_train, y_val = y.iloc[train_idx], y.iloc[val_idx]\n","\n","    # Обучение и предсказание\n","    full_pipeline.fit(X_train, y_train)\n","\n","    # Метрики для train\n","    y_train_pred = full_pipeline.predict(X_train)\n","    train_mse.append(mean_squared_error(y_train, y_train_pred))\n","    train_mape.append(mean_absolute_percentage_error(y_train, y_train_pred))\n","\n","    # Метрики для validation\n","    y_val_pred = full_pipeline.predict(X_val)\n","    val_mse.append(mean_squared_error(y_val, y_val_pred))\n","    val_mape.append(mean_absolute_percentage_error(y_val, y_val_pred))\n","\n","# Формирование результатов\n","metrics = {\n","    'Train MSE': [np.mean(train_mse), np.median(train_mse)],\n","    'Train MAPE': [np.mean(train_mape), np.median(train_mape)],\n","    'Validation MSE': [np.mean(val_mse), np.median(val_mse)],\n","    'Validation MAPE': [np.mean(val_mape), np.median(val_mape)]\n","}\n","\n","results_full = pd.DataFrame(\n","    metrics,\n","    index=['Mean', 'Median']\n",")\n","print(\"Результаты со всеми признаками и масштабированием:\")\n","print(results_full)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HW6sqr36VbuY","executionInfo":{"status":"ok","timestamp":1754684492922,"user_tz":-300,"elapsed":3237,"user":{"displayName":"vlad rus","userId":"10033689266646351571"}},"outputId":"0ea35f2c-e839-4de2-d1ae-885bd6de528e"},"execution_count":42,"outputs":[{"output_type":"stream","name":"stdout","text":["Результаты со всеми признаками и масштабированием:\n","           Train MSE  Train MAPE  Validation MSE  Validation MAPE\n","Mean    9.991719e+08    0.100445    1.470603e+09         0.122681\n","Median  1.005863e+09    0.100271    1.301422e+09         0.124072\n"]}]},{"cell_type":"markdown","source":["# Пункт 5. Лучший дизайн из п.1 — п.4 + power transform"],"metadata":{"id":"rLr41ANXWuJr"}},{"cell_type":"code","source":["import numpy as np\n","import pandas as pd\n","from sklearn.neighbors import KNeighborsRegressor\n","from sklearn.model_selection import StratifiedKFold\n","from sklearn.metrics import mean_squared_error, mean_absolute_percentage_error\n","from sklearn.preprocessing import OneHotEncoder, StandardScaler, PowerTransformer\n","from sklearn.compose import ColumnTransformer\n","from sklearn.impute import SimpleImputer\n","from sklearn.pipeline import Pipeline\n","\n","# Загрузка данных\n","train = pd.read_csv('train.csv')\n","test = pd.read_csv('test.csv')\n","\n","# Разделение признаков\n","num_cols = train.select_dtypes(include=['int64', 'float64']).columns.drop('SalePrice')\n","cat_cols = train.select_dtypes(include=['object']).columns\n","\n","X = train[num_cols.tolist() + cat_cols.tolist()]\n","y = train['SalePrice']\n","\n","# Создание страт\n","y_strat = pd.qcut(y, q=5, labels=False)\n","\n","# Препроцессинг с Power Transform для числовых признаков\n","num_transformer = Pipeline([\n","    ('imputer', SimpleImputer(strategy='constant', fill_value=0)),\n","    ('power_transform', PowerTransformer(method='yeo-johnson')),  # Нелинейное преобразование\n","    ('scaler', StandardScaler())\n","])\n","\n","cat_transformer = Pipeline([\n","    ('imputer', SimpleImputer(strategy='most_frequent')),\n","    ('onehot', OneHotEncoder(handle_unknown='ignore'))\n","])\n","\n","preprocessor = ColumnTransformer(\n","    transformers=[\n","        ('num', num_transformer, num_cols),\n","        ('cat', cat_transformer, cat_cols)\n","    ])\n","\n","# Модель kNN\n","knn = KNeighborsRegressor(\n","    n_neighbors=5,\n","    weights='uniform',\n","    metric='minkowski',\n","    p=2,\n","    n_jobs=-1\n",")\n","\n","# Полный пайплайн\n","full_pipeline = Pipeline([\n","    ('preprocessor', preprocessor),\n","    ('model', knn)\n","])\n","\n","# Кросс-валидация\n","skf = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)\n","\n","# Сбор метрик\n","train_mse, val_mse = [], []\n","train_mape, val_mape = [], []\n","\n","for train_idx, val_idx in skf.split(X, y_strat):\n","    X_train, X_val = X.iloc[train_idx], X.iloc[val_idx]\n","    y_train, y_val = y.iloc[train_idx], y.iloc[val_idx]\n","\n","    # Обучение и предсказание\n","    full_pipeline.fit(X_train, y_train)\n","\n","    # Метрики для train\n","    y_train_pred = full_pipeline.predict(X_train)\n","    train_mse.append(mean_squared_error(y_train, y_train_pred))\n","    train_mape.append(mean_absolute_percentage_error(y_train, y_train_pred))\n","\n","    # Метрики для validation\n","    y_val_pred = full_pipeline.predict(X_val)\n","    val_mse.append(mean_squared_error(y_val, y_val_pred))\n","    val_mape.append(mean_absolute_percentage_error(y_val, y_val_pred))\n","\n","# Формирование результатов\n","metrics = {\n","    'Train MSE': [np.mean(train_mse), np.median(train_mse)],\n","    'Train MAPE': [np.mean(train_mape), np.median(train_mape)],\n","    'Validation MSE': [np.mean(val_mse), np.median(val_mse)],\n","    'Validation MAPE': [np.mean(val_mape), np.median(val_mape)]\n","}\n","\n","results_power = pd.DataFrame(\n","    metrics,\n","    index=['Mean', 'Median']\n",")\n","print(\"Результаты с Power Transform:\")\n","print(results_power)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0fBh3BWCWH7E","executionInfo":{"status":"ok","timestamp":1754684703678,"user_tz":-300,"elapsed":3987,"user":{"displayName":"vlad rus","userId":"10033689266646351571"}},"outputId":"aa45dede-c793-44f1-d25d-9ebe41401d6d"},"execution_count":43,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/numpy/_core/_methods.py:188: RuntimeWarning: overflow encountered in multiply\n","  x = um.multiply(x, x, out=x)\n","/usr/local/lib/python3.11/dist-packages/numpy/_core/_methods.py:188: RuntimeWarning: overflow encountered in multiply\n","  x = um.multiply(x, x, out=x)\n","/usr/local/lib/python3.11/dist-packages/numpy/_core/_methods.py:199: RuntimeWarning: overflow encountered in reduce\n","  ret = umr_sum(x, axis, dtype, out, keepdims=keepdims, where=where)\n","/usr/local/lib/python3.11/dist-packages/numpy/_core/_methods.py:188: RuntimeWarning: overflow encountered in multiply\n","  x = um.multiply(x, x, out=x)\n","/usr/local/lib/python3.11/dist-packages/numpy/_core/_methods.py:164: RuntimeWarning: overflow encountered in reduce\n","  arrmean = umr_sum(arr, axis, dtype, keepdims=True, where=where)\n","/usr/local/lib/python3.11/dist-packages/numpy/_core/_methods.py:188: RuntimeWarning: overflow encountered in multiply\n","  x = um.multiply(x, x, out=x)\n","/usr/local/lib/python3.11/dist-packages/numpy/_core/_methods.py:188: RuntimeWarning: overflow encountered in multiply\n","  x = um.multiply(x, x, out=x)\n"]},{"output_type":"stream","name":"stdout","text":["Результаты с Power Transform:\n","           Train MSE  Train MAPE  Validation MSE  Validation MAPE\n","Mean    9.551415e+08    0.100323    1.423564e+09         0.122603\n","Median  9.633802e+08    0.100077    1.137753e+09         0.122271\n"]}]},{"cell_type":"markdown","source":["#  Пункт 6. Все предыдущие приемы п.1— п.5 + power transform (target)"],"metadata":{"id":"1qSgQYsNXUUe"}},{"cell_type":"code","source":["import numpy as np\n","import pandas as pd\n","from sklearn.neighbors import KNeighborsRegressor\n","from sklearn.model_selection import StratifiedKFold\n","from sklearn.metrics import mean_squared_error, mean_absolute_percentage_error\n","from sklearn.preprocessing import OneHotEncoder, StandardScaler, PowerTransformer\n","from sklearn.compose import ColumnTransformer, TransformedTargetRegressor\n","from sklearn.impute import SimpleImputer\n","from sklearn.pipeline import Pipeline\n","\n","# Загрузка данных\n","train = pd.read_csv('train.csv')\n","test = pd.read_csv('test.csv')\n","\n","# Разделение признаков\n","num_cols = train.select_dtypes(include=['int64', 'float64']).columns.drop('SalePrice')\n","cat_cols = train.select_dtypes(include=['object']).columns\n","\n","X = train[num_cols.tolist() + cat_cols.tolist()]\n","y = train['SalePrice']\n","\n","# Создание страт\n","y_strat = pd.qcut(y, q=5, labels=False)\n","\n","# Препроцессинг с Power Transform для числовых признаков\n","num_transformer = Pipeline([\n","    ('imputer', SimpleImputer(strategy='constant', fill_value=0)),\n","    ('power_transform', PowerTransformer(method='yeo-johnson')),\n","    ('scaler', StandardScaler())\n","])\n","\n","cat_transformer = Pipeline([\n","    ('imputer', SimpleImputer(strategy='most_frequent')),\n","    ('onehot', OneHotEncoder(handle_unknown='ignore'))\n","])\n","\n","preprocessor = ColumnTransformer(\n","    transformers=[\n","        ('num', num_transformer, num_cols),\n","        ('cat', cat_transformer, cat_cols)\n","    ])\n","\n","# Модель kNN\n","knn = KNeighborsRegressor(\n","    n_neighbors=5,\n","    weights='uniform',\n","    metric='minkowski',\n","    p=2,\n","    n_jobs=-1\n",")\n","\n","# Полный пайплайн с трансформацией таргета\n","full_pipeline = Pipeline([\n","    ('preprocessor', preprocessor),\n","    ('model', knn)\n","])\n","\n","# Обертка для трансформации таргета\n","model_wrapper = TransformedTargetRegressor(\n","    regressor=full_pipeline,\n","    transformer=PowerTransformer(method='yeo-johnson'),\n","    inverse_func=None  # Автоматическое обратное преобразование\n",")\n","\n","# Кросс-валидация\n","skf = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)\n","\n","# Сбор метрик\n","train_mse, val_mse = [], []\n","train_mape, val_mape = [], []\n","\n","for train_idx, val_idx in skf.split(X, y_strat):\n","    X_train, X_val = X.iloc[train_idx], X.iloc[val_idx]\n","    y_train, y_val = y.iloc[train_idx], y.iloc[val_idx]\n","\n","    # Обучение с трансформацией таргета\n","    model_wrapper.fit(X_train, y_train)\n","\n","    # Предсказания с автоматическим обратным преобразованием\n","    y_train_pred = model_wrapper.predict(X_train)\n","    y_val_pred = model_wrapper.predict(X_val)\n","\n","    # Метрики для train\n","    train_mse.append(mean_squared_error(y_train, y_train_pred))\n","    train_mape.append(mean_absolute_percentage_error(y_train, y_train_pred))\n","\n","    # Метрики для validation\n","    val_mse.append(mean_squared_error(y_val, y_val_pred))\n","    val_mape.append(mean_absolute_percentage_error(y_val, y_val_pred))\n","\n","# Формирование результатов\n","metrics = {\n","    'Train MSE': [np.mean(train_mse), np.median(train_mse)],\n","    'Train MAPE': [np.mean(train_mape), np.median(train_mape)],\n","    'Validation MSE': [np.mean(val_mse), np.median(val_mse)],\n","    'Validation MAPE': [np.mean(val_mape), np.median(val_mape)]\n","}\n","\n","results_target_transform = pd.DataFrame(\n","    metrics,\n","    index=['Mean', 'Median']\n",")\n","print(\"Результаты с трансформацией таргета:\")\n","print(results_target_transform)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"drLLFEq8W7MY","executionInfo":{"status":"ok","timestamp":1754684873066,"user_tz":-300,"elapsed":6627,"user":{"displayName":"vlad rus","userId":"10033689266646351571"}},"outputId":"6949e1cd-dce2-40ea-ba1d-7b19975be4f0"},"execution_count":44,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/numpy/_core/_methods.py:188: RuntimeWarning: overflow encountered in multiply\n","  x = um.multiply(x, x, out=x)\n","/usr/local/lib/python3.11/dist-packages/numpy/_core/_methods.py:188: RuntimeWarning: overflow encountered in multiply\n","  x = um.multiply(x, x, out=x)\n","/usr/local/lib/python3.11/dist-packages/numpy/_core/_methods.py:199: RuntimeWarning: overflow encountered in reduce\n","  ret = umr_sum(x, axis, dtype, out, keepdims=keepdims, where=where)\n","/usr/local/lib/python3.11/dist-packages/numpy/_core/_methods.py:188: RuntimeWarning: overflow encountered in multiply\n","  x = um.multiply(x, x, out=x)\n","/usr/local/lib/python3.11/dist-packages/numpy/_core/_methods.py:164: RuntimeWarning: overflow encountered in reduce\n","  arrmean = umr_sum(arr, axis, dtype, keepdims=True, where=where)\n","/usr/local/lib/python3.11/dist-packages/numpy/_core/_methods.py:188: RuntimeWarning: overflow encountered in multiply\n","  x = um.multiply(x, x, out=x)\n","/usr/local/lib/python3.11/dist-packages/numpy/_core/_methods.py:188: RuntimeWarning: overflow encountered in multiply\n","  x = um.multiply(x, x, out=x)\n"]},{"output_type":"stream","name":"stdout","text":["Результаты с трансформацией таргета:\n","           Train MSE  Train MAPE  Validation MSE  Validation MAPE\n","Mean    1.019152e+09    0.098416    1.466893e+09         0.121283\n","Median  1.036494e+09    0.098275    1.197484e+09         0.121710\n"]}]},{"cell_type":"markdown","source":["# Пункт 7. Лучший дизайн + обработка выбросов"],"metadata":{"id":"tg4f85ZTX742"}},{"cell_type":"code","source":["import numpy as np\n","import pandas as pd\n","from sklearn.neighbors import KNeighborsRegressor\n","from sklearn.model_selection import StratifiedKFold\n","from sklearn.metrics import mean_squared_error, mean_absolute_percentage_error\n","from sklearn.preprocessing import OneHotEncoder, StandardScaler\n","from sklearn.compose import ColumnTransformer\n","from sklearn.impute import SimpleImputer\n","from sklearn.pipeline import Pipeline\n","\n","# Загрузка данных\n","train = pd.read_csv('train.csv')\n","test = pd.read_csv('test.csv')\n","\n","# Разделение признаков\n","num_cols = train.select_dtypes(include=['int64', 'float64']).columns.drop('SalePrice')\n","cat_cols = train.select_dtypes(include=['object']).columns\n","\n","X = train[num_cols.tolist() + cat_cols.tolist()]\n","y = train['SalePrice']\n","\n","# Создание страт\n","y_strat = pd.qcut(y, q=5, labels=False)\n","\n","# Препроцессинг (как в пункте 4)\n","num_transformer = Pipeline([\n","    ('imputer', SimpleImputer(strategy='constant', fill_value=0)),\n","    ('scaler', StandardScaler())\n","])\n","\n","cat_transformer = Pipeline([\n","    ('imputer', SimpleImputer(strategy='most_frequent')),\n","    ('onehot', OneHotEncoder(handle_unknown='ignore'))\n","])\n","\n","preprocessor = ColumnTransformer(\n","    transformers=[\n","        ('num', num_transformer, num_cols),\n","        ('cat', cat_transformer, cat_cols)\n","    ])\n","\n","# Модель kNN\n","knn = KNeighborsRegressor(\n","    n_neighbors=5,\n","    weights='uniform',\n","    metric='minkowski',\n","    p=2\n",")\n","\n","# Настройка кросс-валидации\n","skf = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)\n","\n","# Сбор метрик\n","train_mse, val_mse = [], []\n","train_mape, val_mape = [], []\n","\n","for train_idx, val_idx in skf.split(X, y_strat):\n","    X_train, X_val = X.iloc[train_idx], X.iloc[val_idx]\n","    y_train, y_val = y.iloc[train_idx], y.iloc[val_idx]\n","\n","    # Удаление выбросов только в тренировочных данных\n","    q1 = y_train.quantile(0.25)\n","    q3 = y_train.quantile(0.75)\n","    iqr = q3 - q1\n","    lower_bound = q1 - 1.5 * iqr\n","    upper_bound = q3 + 1.5 * iqr\n","\n","    # Фильтрация выбросов\n","    mask = (y_train >= lower_bound) & (y_train <= upper_bound)\n","    X_train_filtered = X_train[mask]\n","    y_train_filtered = y_train[mask]\n","\n","    # Препроцессинг\n","    X_train_processed = preprocessor.fit_transform(X_train_filtered)\n","    X_val_processed = preprocessor.transform(X_val)\n","\n","    # Обучение и предсказание\n","    knn.fit(X_train_processed, y_train_filtered)\n","\n","    # Метрики для train\n","    y_train_pred = knn.predict(X_train_processed)\n","    train_mse.append(mean_squared_error(y_train_filtered, y_train_pred))\n","    train_mape.append(mean_absolute_percentage_error(y_train_filtered, y_train_pred))\n","\n","    # Метрики для validation\n","    y_val_pred = knn.predict(X_val_processed)\n","    val_mse.append(mean_squared_error(y_val, y_val_pred))\n","    val_mape.append(mean_absolute_percentage_error(y_val, y_val_pred))\n","\n","# Формирование результатов\n","metrics = {\n","    'Train MSE': [np.mean(train_mse), np.median(train_mse)],\n","    'Train MAPE': [np.mean(train_mape), np.median(train_mape)],\n","    'Validation MSE': [np.mean(val_mse), np.median(val_mse)],\n","    'Validation MAPE': [np.mean(val_mape), np.median(val_mape)]\n","}\n","\n","results_outliers = pd.DataFrame(\n","    metrics,\n","    index=['Mean', 'Median']\n",")\n","print(\"Результаты с удалением выбросов:\")\n","print(results_outliers)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Vi4Hn5PPXj5r","executionInfo":{"status":"ok","timestamp":1754685509730,"user_tz":-300,"elapsed":3017,"user":{"displayName":"vlad rus","userId":"10033689266646351571"}},"outputId":"9bc03531-6c42-448d-c646-c2fa1a545a08"},"execution_count":46,"outputs":[{"output_type":"stream","name":"stdout","text":["Результаты с удалением выбросов:\n","           Train MSE  Train MAPE  Validation MSE  Validation MAPE\n","Mean    4.328321e+08    0.093778    1.796711e+09         0.123268\n","Median  4.328310e+08    0.093667    1.538050e+09         0.123422\n"]}]},{"cell_type":"markdown","source":["#  Пункт 8. Лучший дизайн + подбор гиперпараметров"],"metadata":{"id":"YRRlyZTmbBR_"}},{"cell_type":"code","source":["import numpy as np\n","import pandas as pd\n","from sklearn.neighbors import KNeighborsRegressor\n","from sklearn.model_selection import StratifiedKFold\n","from sklearn.metrics import mean_squared_error, mean_absolute_percentage_error\n","from sklearn.preprocessing import OneHotEncoder, StandardScaler, PowerTransformer\n","from sklearn.compose import ColumnTransformer, TransformedTargetRegressor\n","from sklearn.impute import SimpleImputer\n","from sklearn.pipeline import Pipeline\n","\n","# Загрузка данных\n","train = pd.read_csv('train.csv')\n","test = pd.read_csv('test.csv')\n","\n","# Разделение признаков\n","num_cols = train.select_dtypes(include=['int64', 'float64']).columns.drop('SalePrice')\n","cat_cols = train.select_dtypes(include=['object']).columns\n","\n","X = train[num_cols.tolist() + cat_cols.tolist()]\n","y = train['SalePrice']\n","\n","# Создание страт\n","y_strat = pd.qcut(y, q=5, labels=False)\n","\n","# Препроцессинг с Power Transform для числовых признаков\n","num_transformer = Pipeline([\n","    ('imputer', SimpleImputer(strategy='constant', fill_value=0)),\n","    ('power_transform', PowerTransformer(method='yeo-johnson')),\n","    ('scaler', StandardScaler())\n","])\n","\n","cat_transformer = Pipeline([\n","    ('imputer', SimpleImputer(strategy='most_frequent')),\n","    ('onehot', OneHotEncoder(handle_unknown='ignore'))\n","])\n","\n","preprocessor = ColumnTransformer(\n","    transformers=[\n","        ('num', num_transformer, num_cols),\n","        ('cat', cat_transformer, cat_cols)\n","    ])\n","\n","# Настройки кросс-валидации\n","skf = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)\n","\n","# Параметры для перебора\n","param_grid = [\n","    {'n_neighbors': 5, 'weights': 'uniform', 'p': 2},\n","    {'n_neighbors': 1, 'weights': 'uniform', 'p': 2},\n","    {'n_neighbors': 3, 'weights': 'uniform', 'p': 2},\n","    {'n_neighbors': 7, 'weights': 'uniform', 'p': 2},\n","    {'n_neighbors': 10, 'weights': 'uniform', 'p': 2},\n","    {'n_neighbors': 5, 'weights': 'distance', 'p': 2},\n","    {'n_neighbors': 1, 'weights': 'distance', 'p': 2},\n","    {'n_neighbors': 3, 'weights': 'distance', 'p': 2},\n","    {'n_neighbors': 7, 'weights': 'distance', 'p': 2},\n","    {'n_neighbors': 10, 'weights': 'distance', 'p': 2}\n","]\n","\n","# Результаты для всех комбинаций\n","all_results = []\n","\n","for params in param_grid:\n","    # Модель kNN с текущими параметрами\n","    knn = KNeighborsRegressor(**params, n_jobs=-1)\n","\n","    # Полный пайплайн\n","    full_pipeline = Pipeline([\n","        ('preprocessor', preprocessor),\n","        ('model', knn)\n","    ])\n","\n","    # Обертка для трансформации таргета\n","    model_wrapper = TransformedTargetRegressor(\n","        regressor=full_pipeline,\n","        transformer=PowerTransformer(method='yeo-johnson'),\n","        inverse_func=None\n","    )\n","\n","    # Сбор метрик\n","    train_mse, val_mse = [], []\n","    train_mape, val_mape = [], []\n","\n","    for train_idx, val_idx in skf.split(X, y_strat):\n","        X_train, X_val = X.iloc[train_idx], X.iloc[val_idx]\n","        y_train, y_val = y.iloc[train_idx], y.iloc[val_idx]\n","\n","        model_wrapper.fit(X_train, y_train)\n","\n","        # Предсказания\n","        y_train_pred = model_wrapper.predict(X_train)\n","        y_val_pred = model_wrapper.predict(X_val)\n","\n","        # Метрики\n","        train_mse.append(mean_squared_error(y_train, y_train_pred))\n","        train_mape.append(mean_absolute_percentage_error(y_train, y_train_pred))\n","        val_mse.append(mean_squared_error(y_val, y_val_pred))\n","        val_mape.append(mean_absolute_percentage_error(y_val, y_val_pred))\n","\n","    # Сохранение результатов\n","    result = {\n","        'params': params,\n","        'train_mse': np.mean(train_mse),\n","        'train_mape': np.mean(train_mape),\n","        'val_mse': np.mean(val_mse),\n","        'val_mape': np.mean(val_mape)\n","    }\n","    all_results.append(result)\n","\n","# Находим лучшую комбинацию по минимальному val_mse\n","best_result = min(all_results, key=lambda x: x['val_mse'])\n","\n","# Формируем финальный отчет\n","metrics = {\n","    'Train MSE': [best_result['train_mse']],\n","    'Train MAPE': [best_result['train_mape']],\n","    'Validation MSE': [best_result['val_mse']],\n","    'Validation MAPE': [best_result['val_mape']]\n","}\n","\n","results_best_params = pd.DataFrame(metrics, index=['Best Model'])\n","print(\"Результаты лучшей модели с подобранными гиперпараметрами:\")\n","print(results_best_params)\n","print(\"\\nЛучшие параметры:\", best_result['params'])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8UeYhI-5aANs","executionInfo":{"status":"ok","timestamp":1754686078348,"user_tz":-300,"elapsed":30916,"user":{"displayName":"vlad rus","userId":"10033689266646351571"}},"outputId":"549e5047-5e50-4d4e-f8d2-8a569f3324be"},"execution_count":48,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/numpy/_core/_methods.py:188: RuntimeWarning: overflow encountered in multiply\n","  x = um.multiply(x, x, out=x)\n","/usr/local/lib/python3.11/dist-packages/numpy/_core/_methods.py:188: RuntimeWarning: overflow encountered in multiply\n","  x = um.multiply(x, x, out=x)\n","/usr/local/lib/python3.11/dist-packages/numpy/_core/_methods.py:199: RuntimeWarning: overflow encountered in reduce\n","  ret = umr_sum(x, axis, dtype, out, keepdims=keepdims, where=where)\n","/usr/local/lib/python3.11/dist-packages/numpy/_core/_methods.py:188: RuntimeWarning: overflow encountered in multiply\n","  x = um.multiply(x, x, out=x)\n","/usr/local/lib/python3.11/dist-packages/numpy/_core/_methods.py:164: RuntimeWarning: overflow encountered in reduce\n","  arrmean = umr_sum(arr, axis, dtype, keepdims=True, where=where)\n","/usr/local/lib/python3.11/dist-packages/numpy/_core/_methods.py:188: RuntimeWarning: overflow encountered in multiply\n","  x = um.multiply(x, x, out=x)\n","/usr/local/lib/python3.11/dist-packages/numpy/_core/_methods.py:188: RuntimeWarning: overflow encountered in multiply\n","  x = um.multiply(x, x, out=x)\n","/usr/local/lib/python3.11/dist-packages/numpy/_core/_methods.py:188: RuntimeWarning: overflow encountered in multiply\n","  x = um.multiply(x, x, out=x)\n","/usr/local/lib/python3.11/dist-packages/numpy/_core/_methods.py:188: RuntimeWarning: overflow encountered in multiply\n","  x = um.multiply(x, x, out=x)\n","/usr/local/lib/python3.11/dist-packages/numpy/_core/_methods.py:199: RuntimeWarning: overflow encountered in reduce\n","  ret = umr_sum(x, axis, dtype, out, keepdims=keepdims, where=where)\n","/usr/local/lib/python3.11/dist-packages/numpy/_core/_methods.py:188: RuntimeWarning: overflow encountered in multiply\n","  x = um.multiply(x, x, out=x)\n","/usr/local/lib/python3.11/dist-packages/numpy/_core/_methods.py:164: RuntimeWarning: overflow encountered in reduce\n","  arrmean = umr_sum(arr, axis, dtype, keepdims=True, where=where)\n","/usr/local/lib/python3.11/dist-packages/numpy/_core/_methods.py:188: RuntimeWarning: overflow encountered in multiply\n","  x = um.multiply(x, x, out=x)\n","/usr/local/lib/python3.11/dist-packages/numpy/_core/_methods.py:188: RuntimeWarning: overflow encountered in multiply\n","  x = um.multiply(x, x, out=x)\n","/usr/local/lib/python3.11/dist-packages/numpy/_core/_methods.py:188: RuntimeWarning: overflow encountered in multiply\n","  x = um.multiply(x, x, out=x)\n","/usr/local/lib/python3.11/dist-packages/numpy/_core/_methods.py:188: RuntimeWarning: overflow encountered in multiply\n","  x = um.multiply(x, x, out=x)\n","/usr/local/lib/python3.11/dist-packages/numpy/_core/_methods.py:199: RuntimeWarning: overflow encountered in reduce\n","  ret = umr_sum(x, axis, dtype, out, keepdims=keepdims, where=where)\n","/usr/local/lib/python3.11/dist-packages/numpy/_core/_methods.py:188: RuntimeWarning: overflow encountered in multiply\n","  x = um.multiply(x, x, out=x)\n","/usr/local/lib/python3.11/dist-packages/numpy/_core/_methods.py:164: RuntimeWarning: overflow encountered in reduce\n","  arrmean = umr_sum(arr, axis, dtype, keepdims=True, where=where)\n","/usr/local/lib/python3.11/dist-packages/numpy/_core/_methods.py:188: RuntimeWarning: overflow encountered in multiply\n","  x = um.multiply(x, x, out=x)\n","/usr/local/lib/python3.11/dist-packages/numpy/_core/_methods.py:188: RuntimeWarning: overflow encountered in multiply\n","  x = um.multiply(x, x, out=x)\n","/usr/local/lib/python3.11/dist-packages/numpy/_core/_methods.py:188: RuntimeWarning: overflow encountered in multiply\n","  x = um.multiply(x, x, out=x)\n","/usr/local/lib/python3.11/dist-packages/numpy/_core/_methods.py:188: RuntimeWarning: overflow encountered in multiply\n","  x = um.multiply(x, x, out=x)\n","/usr/local/lib/python3.11/dist-packages/numpy/_core/_methods.py:199: RuntimeWarning: overflow encountered in reduce\n","  ret = umr_sum(x, axis, dtype, out, keepdims=keepdims, where=where)\n","/usr/local/lib/python3.11/dist-packages/numpy/_core/_methods.py:188: RuntimeWarning: overflow encountered in multiply\n","  x = um.multiply(x, x, out=x)\n","/usr/local/lib/python3.11/dist-packages/numpy/_core/_methods.py:164: RuntimeWarning: overflow encountered in reduce\n","  arrmean = umr_sum(arr, axis, dtype, keepdims=True, where=where)\n","/usr/local/lib/python3.11/dist-packages/numpy/_core/_methods.py:188: RuntimeWarning: overflow encountered in multiply\n","  x = um.multiply(x, x, out=x)\n","/usr/local/lib/python3.11/dist-packages/numpy/_core/_methods.py:188: RuntimeWarning: overflow encountered in multiply\n","  x = um.multiply(x, x, out=x)\n","/usr/local/lib/python3.11/dist-packages/numpy/_core/_methods.py:188: RuntimeWarning: overflow encountered in multiply\n","  x = um.multiply(x, x, out=x)\n","/usr/local/lib/python3.11/dist-packages/numpy/_core/_methods.py:188: RuntimeWarning: overflow encountered in multiply\n","  x = um.multiply(x, x, out=x)\n","/usr/local/lib/python3.11/dist-packages/numpy/_core/_methods.py:199: RuntimeWarning: overflow encountered in reduce\n","  ret = umr_sum(x, axis, dtype, out, keepdims=keepdims, where=where)\n","/usr/local/lib/python3.11/dist-packages/numpy/_core/_methods.py:188: RuntimeWarning: overflow encountered in multiply\n","  x = um.multiply(x, x, out=x)\n","/usr/local/lib/python3.11/dist-packages/numpy/_core/_methods.py:164: RuntimeWarning: overflow encountered in reduce\n","  arrmean = umr_sum(arr, axis, dtype, keepdims=True, where=where)\n","/usr/local/lib/python3.11/dist-packages/numpy/_core/_methods.py:188: RuntimeWarning: overflow encountered in multiply\n","  x = um.multiply(x, x, out=x)\n","/usr/local/lib/python3.11/dist-packages/numpy/_core/_methods.py:188: RuntimeWarning: overflow encountered in multiply\n","  x = um.multiply(x, x, out=x)\n","/usr/local/lib/python3.11/dist-packages/numpy/_core/_methods.py:188: RuntimeWarning: overflow encountered in multiply\n","  x = um.multiply(x, x, out=x)\n","/usr/local/lib/python3.11/dist-packages/numpy/_core/_methods.py:188: RuntimeWarning: overflow encountered in multiply\n","  x = um.multiply(x, x, out=x)\n","/usr/local/lib/python3.11/dist-packages/numpy/_core/_methods.py:199: RuntimeWarning: overflow encountered in reduce\n","  ret = umr_sum(x, axis, dtype, out, keepdims=keepdims, where=where)\n","/usr/local/lib/python3.11/dist-packages/numpy/_core/_methods.py:188: RuntimeWarning: overflow encountered in multiply\n","  x = um.multiply(x, x, out=x)\n","/usr/local/lib/python3.11/dist-packages/numpy/_core/_methods.py:164: RuntimeWarning: overflow encountered in reduce\n","  arrmean = umr_sum(arr, axis, dtype, keepdims=True, where=where)\n","/usr/local/lib/python3.11/dist-packages/numpy/_core/_methods.py:188: RuntimeWarning: overflow encountered in multiply\n","  x = um.multiply(x, x, out=x)\n","/usr/local/lib/python3.11/dist-packages/numpy/_core/_methods.py:188: RuntimeWarning: overflow encountered in multiply\n","  x = um.multiply(x, x, out=x)\n","/usr/local/lib/python3.11/dist-packages/numpy/_core/_methods.py:188: RuntimeWarning: overflow encountered in multiply\n","  x = um.multiply(x, x, out=x)\n","/usr/local/lib/python3.11/dist-packages/numpy/_core/_methods.py:188: RuntimeWarning: overflow encountered in multiply\n","  x = um.multiply(x, x, out=x)\n","/usr/local/lib/python3.11/dist-packages/numpy/_core/_methods.py:199: RuntimeWarning: overflow encountered in reduce\n","  ret = umr_sum(x, axis, dtype, out, keepdims=keepdims, where=where)\n","/usr/local/lib/python3.11/dist-packages/numpy/_core/_methods.py:188: RuntimeWarning: overflow encountered in multiply\n","  x = um.multiply(x, x, out=x)\n","/usr/local/lib/python3.11/dist-packages/numpy/_core/_methods.py:164: RuntimeWarning: overflow encountered in reduce\n","  arrmean = umr_sum(arr, axis, dtype, keepdims=True, where=where)\n","/usr/local/lib/python3.11/dist-packages/numpy/_core/_methods.py:188: RuntimeWarning: overflow encountered in multiply\n","  x = um.multiply(x, x, out=x)\n","/usr/local/lib/python3.11/dist-packages/numpy/_core/_methods.py:188: RuntimeWarning: overflow encountered in multiply\n","  x = um.multiply(x, x, out=x)\n","/usr/local/lib/python3.11/dist-packages/numpy/_core/_methods.py:188: RuntimeWarning: overflow encountered in multiply\n","  x = um.multiply(x, x, out=x)\n","/usr/local/lib/python3.11/dist-packages/numpy/_core/_methods.py:188: RuntimeWarning: overflow encountered in multiply\n","  x = um.multiply(x, x, out=x)\n","/usr/local/lib/python3.11/dist-packages/numpy/_core/_methods.py:199: RuntimeWarning: overflow encountered in reduce\n","  ret = umr_sum(x, axis, dtype, out, keepdims=keepdims, where=where)\n","/usr/local/lib/python3.11/dist-packages/numpy/_core/_methods.py:188: RuntimeWarning: overflow encountered in multiply\n","  x = um.multiply(x, x, out=x)\n","/usr/local/lib/python3.11/dist-packages/numpy/_core/_methods.py:164: RuntimeWarning: overflow encountered in reduce\n","  arrmean = umr_sum(arr, axis, dtype, keepdims=True, where=where)\n","/usr/local/lib/python3.11/dist-packages/numpy/_core/_methods.py:188: RuntimeWarning: overflow encountered in multiply\n","  x = um.multiply(x, x, out=x)\n","/usr/local/lib/python3.11/dist-packages/numpy/_core/_methods.py:188: RuntimeWarning: overflow encountered in multiply\n","  x = um.multiply(x, x, out=x)\n","/usr/local/lib/python3.11/dist-packages/numpy/_core/_methods.py:188: RuntimeWarning: overflow encountered in multiply\n","  x = um.multiply(x, x, out=x)\n","/usr/local/lib/python3.11/dist-packages/numpy/_core/_methods.py:188: RuntimeWarning: overflow encountered in multiply\n","  x = um.multiply(x, x, out=x)\n","/usr/local/lib/python3.11/dist-packages/numpy/_core/_methods.py:199: RuntimeWarning: overflow encountered in reduce\n","  ret = umr_sum(x, axis, dtype, out, keepdims=keepdims, where=where)\n","/usr/local/lib/python3.11/dist-packages/numpy/_core/_methods.py:188: RuntimeWarning: overflow encountered in multiply\n","  x = um.multiply(x, x, out=x)\n","/usr/local/lib/python3.11/dist-packages/numpy/_core/_methods.py:164: RuntimeWarning: overflow encountered in reduce\n","  arrmean = umr_sum(arr, axis, dtype, keepdims=True, where=where)\n","/usr/local/lib/python3.11/dist-packages/numpy/_core/_methods.py:188: RuntimeWarning: overflow encountered in multiply\n","  x = um.multiply(x, x, out=x)\n","/usr/local/lib/python3.11/dist-packages/numpy/_core/_methods.py:188: RuntimeWarning: overflow encountered in multiply\n","  x = um.multiply(x, x, out=x)\n","/usr/local/lib/python3.11/dist-packages/numpy/_core/_methods.py:188: RuntimeWarning: overflow encountered in multiply\n","  x = um.multiply(x, x, out=x)\n","/usr/local/lib/python3.11/dist-packages/numpy/_core/_methods.py:188: RuntimeWarning: overflow encountered in multiply\n","  x = um.multiply(x, x, out=x)\n","/usr/local/lib/python3.11/dist-packages/numpy/_core/_methods.py:199: RuntimeWarning: overflow encountered in reduce\n","  ret = umr_sum(x, axis, dtype, out, keepdims=keepdims, where=where)\n","/usr/local/lib/python3.11/dist-packages/numpy/_core/_methods.py:188: RuntimeWarning: overflow encountered in multiply\n","  x = um.multiply(x, x, out=x)\n","/usr/local/lib/python3.11/dist-packages/numpy/_core/_methods.py:164: RuntimeWarning: overflow encountered in reduce\n","  arrmean = umr_sum(arr, axis, dtype, keepdims=True, where=where)\n","/usr/local/lib/python3.11/dist-packages/numpy/_core/_methods.py:188: RuntimeWarning: overflow encountered in multiply\n","  x = um.multiply(x, x, out=x)\n","/usr/local/lib/python3.11/dist-packages/numpy/_core/_methods.py:188: RuntimeWarning: overflow encountered in multiply\n","  x = um.multiply(x, x, out=x)\n"]},{"output_type":"stream","name":"stdout","text":["Результаты лучшей модели с подобранными гиперпараметрами:\n","               Train MSE    Train MAPE  Validation MSE  Validation MAPE\n","Best Model  2.353830e-19  1.826118e-15    1.439074e+09         0.118848\n","\n","Лучшие параметры: {'n_neighbors': 10, 'weights': 'distance', 'p': 2}\n"]}]},{"cell_type":"markdown","source":["# Вывод данных"],"metadata":{"id":"PLsUYl7Zdwwo"}},{"cell_type":"code","source":["import numpy as np\n","import pandas as pd\n","from sklearn.neighbors import KNeighborsRegressor\n","from sklearn.preprocessing import OneHotEncoder, StandardScaler, PowerTransformer\n","from sklearn.compose import ColumnTransformer, TransformedTargetRegressor\n","from sklearn.impute import SimpleImputer\n","from sklearn.pipeline import Pipeline\n","\n","# Загрузка данных\n","train = pd.read_csv('train.csv')\n","test = pd.read_csv('test.csv')\n","\n","# Разделение признаков\n","num_cols = train.select_dtypes(include=['int64', 'float64']).columns.drop('SalePrice')\n","cat_cols = train.select_dtypes(include=['object']).columns\n","\n","X_train_full = train[num_cols.tolist() + cat_cols.tolist()]\n","y_train_full = train['SalePrice']\n","\n","X_test = test[num_cols.tolist() + cat_cols.tolist()]\n","\n","# Препроцессинг с Power Transform для числовых признаков\n","num_transformer = Pipeline([\n","    ('imputer', SimpleImputer(strategy='constant', fill_value=0)),\n","    ('power_transform', PowerTransformer(method='yeo-johnson')),\n","    ('scaler', StandardScaler())\n","])\n","\n","cat_transformer = Pipeline([\n","    ('imputer', SimpleImputer(strategy='most_frequent')),\n","    ('onehot', OneHotEncoder(handle_unknown='ignore'))\n","])\n","\n","preprocessor = ColumnTransformer(\n","    transformers=[\n","        ('num', num_transformer, num_cols),\n","        ('cat', cat_transformer, cat_cols)\n","    ])\n","\n","# Лучшие параметры из пункта 8\n","best_params = {'n_neighbors': 3, 'weights': 'distance', 'p': 2}\n","knn = KNeighborsRegressor(**best_params, n_jobs=-1)\n","\n","# Полный пайплайн\n","full_pipeline = Pipeline([\n","    ('preprocessor', preprocessor),\n","    ('model', knn)\n","])\n","\n","# Обертка для трансформации таргета\n","model_wrapper = TransformedTargetRegressor(\n","    regressor=full_pipeline,\n","    transformer=PowerTransformer(method='yeo-johnson'),\n","    inverse_func=None\n",")\n","\n","# Обучение на всех данных\n","model_wrapper.fit(X_train_full, y_train_full)\n","\n","# Предсказание для тестового набора\n","test_pred = model_wrapper.predict(X_test)\n","\n","# Формирование файла с предсказаниями\n","submission = pd.DataFrame({\n","    'Id': test['Id'],\n","    'SalePrice': test_pred\n","})\n","\n","# Сохранение результатов\n","submission.to_csv('submission_knn_best.csv', index=False)\n","print(\"Предсказания для test.csv сохранены в файл 'submission_knn_best.csv'\")\n","\n","# Анализ предсказаний\n","print(\"\\nАнализ предсказаний для test.csv:\")\n","print(f\"Количество предсказаний: {len(test_pred)}\")\n","print(f\"Минимальная предсказанная цена: ${test_pred.min():,.2f}\")\n","print(f\"Максимальная предсказанная цена: ${test_pred.max():,.2f}\")\n","print(f\"Средняя предсказанная цена: ${test_pred.mean():,.2f}\")\n","print(f\"Медианная предсказанная цена: ${np.median(test_pred):,.2f}\")\n","\n","# Визуализация распределения предсказаний\n","import matplotlib.pyplot as plt\n","plt.figure(figsize=(10, 6))\n","plt.hist(test_pred, bins=50, color='skyblue', edgecolor='black')\n","plt.title('Распределение предсказанных цен на дома в test.csv')\n","plt.xlabel('Predicted SalePrice')\n","plt.ylabel('Количество домов')\n","plt.grid(axis='y', alpha=0.75)\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":738},"id":"2lQGvo-2bwPj","executionInfo":{"status":"ok","timestamp":1754686410526,"user_tz":-300,"elapsed":1394,"user":{"displayName":"vlad rus","userId":"10033689266646351571"}},"outputId":"c9e3ae05-4ecc-4b83-9b7f-c9f75804b3da"},"execution_count":49,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/numpy/_core/_methods.py:188: RuntimeWarning: overflow encountered in multiply\n","  x = um.multiply(x, x, out=x)\n"]},{"output_type":"stream","name":"stdout","text":["Предсказания для test.csv сохранены в файл 'submission_knn_best.csv'\n","\n","Анализ предсказаний для test.csv:\n","Количество предсказаний: 1459\n","Минимальная предсказанная цена: $50,102.29\n","Максимальная предсказанная цена: $525,842.63\n","Средняя предсказанная цена: $173,573.67\n","Медианная предсказанная цена: $155,220.98\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":[],"metadata":{"id":"2QdIIbHXdciN"},"execution_count":null,"outputs":[]}]}